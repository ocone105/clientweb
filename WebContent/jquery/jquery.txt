jQuery
	- 자바스크립트로 만들어진 라이브러리 프레임워크 처럼 쓰인다.
	- DOM을 쉽게 사용할 수 있도록 지원한다.
	- 크로스브라우징(모든 브라우저에서 동일한 뷰를 볼 수 있도록 구성)을 구현
	
1. 기능
	- DOM
		: DOM객체의 필수 속성, 메소드, 노드제어
		    스타일(CSS)제어
	- Ajax
	- 플러그인
		: 필요한 기능이 이미 만들어져 있는 것(jQuery로 만들어진 완제품)
	- Effect
		: 애니메이션 효과
		
2. jQuery 사용방법
	1) 라이브러리 파일을 직접 다운로드 받아서 프로젝트에 추가한 후에 사용하는 방법(js파일추가)
		- compressed : jquery-3.2.1.min.js(압축버전 - 로딩속도 빠름)
		- uncompressed : jquery-3.2.1.js(개발자버전 - 수정하여 작업 가능)
		=> 자바스크립트 외부라이브러리 추가해서 사용하는 방법으로 사용
		
	2) cdn방식
		외부 사이트에서 공유한 jQuery라이브러리 경로를 추가하여 작업
		
		
3. 형식
	1) ready handler를 이용해서 작업
	   자바스크립트이므로 <script>태그 내에서 작업
	 => ready handler는 브라우저 내부에서 DOM객체가 생성이 완료되었으면 jQuery작업을 시작하겠다는 의미로 해석
	 	$(document).ready(function){
	 	----------- -----
	 		선택자	 이벤트
	 				// jQuery코드(자바스크립트 문법)
	 		}
	 	}
	 	
	2) 일반적인 jQuery의 문법
	$("선택자").동작()
	-  ----	  ---
	ㅣ	ㅣ	   ㅣ
	ㅣ	ㅣ	  jQuery js파일에 미리 정의되어 있는 실행 할 수 있는 기능
	ㅣ	ㅣ
	ㅣ	css와 거의 동일: class속성., id속성인 경우#
	ㅣ
jQuery를 의미
jQuery의 약식기호	

	=> 무엇을 어떻게
	   --- ----
	   선택자    동작,이벤트와 함께 정의
	   
	  jQuery_effect_test01.html로 간단 테스트
	  
4. 선택자
	- $(객체) : 선택자로 지정한 객체에 적용
	- $("*") : DOM객체의 모든 요소에 적용
	- $("#id명") : 지정한 id속성으로 정의된 요소에 적용
	- $(".class명") : 지정한 class속성으로 정의된 요소에 적용
	- $("태그명") : 해당 태그로 정의된 요소에 적용
	- $(this) : 현재 작업 중인 객체에 적용하겠다는 의미
	- $("태그명1 태그명2") : 태그명1의 내부에 하위로 정의되어 있는 태그2를 선택자로 사용하겠다는 의미
		ex) $("div h1") : div태그 하위태그인 h1을 선택
	- $("태그명.클래스명") : 정의된 태그들 중에서 해당 클래스명으로 정의된 요소만 선택하겠다는 의미
	- $("태그명:first") : 문서내에서 지정한 태그로 정의된 첫 번째 요소
	- $("태그명1 태그명2:first-child") : 태그명1의 하위 태그2 중 첫 번째 자식 노드에 해당하는 요소
									=> 조건에 만족하는 태그들이 여러 개 이면 모두 선택자로 지정
		ex) $("ul li:first-child") : 모든 ul안의 첫 번째 li들이 선택
	- $("[속성명]") : 정의된 속성을 갖고 있는 모든 요소를 선택
	- $("태그명[속성명=속성값]") : 정의된 태그의 속성명과 속성값이 일치하는 요소를 선택
	- $(":input태그의 type") : 해당 type으로 정의된 form태그의 요소가 선택
							HTML5의 요소에도 적용
		ex) $(":button") : <input type="button">인 요소와 <button>인 요소 모두 선택
	- $("태그명:even") : 태그의 짝수
	- $("태그명:odd") : 태그의 홀수
	
5. DOM제어 메소드
	jquery_dom_test01.html
	append() : 선택된 요소의 last child노드로 추가
	prepend() : 선택된 요소의 처음에 새로운 컨텐츠 추가
	after() : 선택된 요소의 뒤에 새로운 형제 노드로 추가
	before() : 선택된 요소의 앞에 새로운 컨텐츠 추가
	remove() : 선택된 요소와 그 자식 요소를 삭제
	empty() : 선택된 요소의 자식요소 삭제(선택된 노드의 하위 노드들을 모두 삭제)
	children() : 특정 노드의 모든 자식노드를 가져오기
	last() : lastChild
	first() : firstChild
	
6. setter/getter메소드
	text() : 원하는 위치에 텍스트를 추가 - setter/getter모두 사용가능
			=> div, p, span태그 등의 텍스트를 반환하거나 텍스트를 설정
			=> text()에 의해서 문자열이 세팅되는 경우 html태그를 적용할 수 없다. 
	val() : 입력필드의 값을 반환하거나 설정 - setter/getter모두 사용가능
			------
	css() : css속성을 적용 (여러 개인 경우 ,로 구분)
	html("추가되는 태그") : 원하는 위치에 html태그를 추가
						=> text()와는 다르게 태그가 실행되어 추가된다.
	attr() : 태그의 속성을 설정하거나 설정된 속성의 값을 출력
	
7. 이벤트
	1) on()을 이용해서 사용하는 방법 - 정식 방법
		$("선택자").on("click",function(){})
		=> 선택자에 해당하는 요소를 클릭하면 function내부의 코드를 실행하겠다는 의미
	
		동적으로 생성된 요소에 이벤트를 연결할 때 on을 이용해서 작업
		이벤트를 여러 개 정의해서 사용할 수 있다.
		$("#id명").on({mouseover:function(){........}, // callback으로 함수명만
					  click:function(){......},
					  keyup:function(){......}});
	2) bind()를 이용해서 가능하다. on이 성능이 개성된 메소드
	3) 이벤트에 대한 약식 표현
		click()...
		mouseover(function(){});
		=> 동적 요소에서 사용할 수 없다.
	
	
8. Effect
	hide() : 선택된 요소를 화면에 감춘다.
	animate
		=> 커스텀 애니메이션을 만들 때 사용
			이동, 효과를 정의하는 것은 모두 css효과를 적용할 수 있다.
			
			[형식]
			.animate( properties [, duration ] [, easing ] [, complete ] )
			
			properties : {}로 표현이 가능하며 필수지정해야 하는 요소 - css속성
			duration(speed) : 효과가 나타나는 속도를 의미 - 단위(밀리초)
			easing : 포인트 이동할 때 애니메이션 속도를 지정
			complete(callback) : animate메소드의 실행이 끝나고 처리해야하는 코드가 있는 경우 함수명을 정의(callback으로 정의하기)
			
	